{"version":3,"sources":["Constants/Constants.js","actions/AppService.js","Components/HeaderComponent/Header.js","Components/SearchComponent/SearchBar.js","Components/IconComponent/IconComponent.js","Components/DetailsComponent/DetailsComponent.js","Screens/HomeScreen/HomeScreen.js","Screens/FavoritesScreen/FavoritesScreen.js","App.js","reportWebVitals.js","index.js"],"names":["APP_ID","API_HOST","API_VERSION","getLocationApiUrl","term","getWeatherApiUrl","key","getAutoCompleteUrl","getCurrentConditionsUrl","getAutoComplete","a","axios","get","getCurrentConditions","get5DaysOfForecasts","Header","props","className","Button","onClick","modeChange","to","setCurrentPage","currentPage","SearchBar","useState","value","setValue","select","setSelect","errMsg","setErrMsg","cursor","setCursor","setDefaultState","onInputChange","results","data","handleClick","city","Key","then","forecast","loc","LocalizedName","Country","ID","setCityForcast","DailyForecasts","placeholder","onKeyDown","e","keyCode","length","onChange","event","target","map","i","charAt","toUpperCase","toString","replace","autoCompleteItemRender","defaults","IconComponent","size","icon","color","animate","DetailsComponent","title","WeatherText","WeatherIcon","HomeScreen","isSetAsFavorite","currentCityKey","isFavorite","setIsFavorite","weekday","WeekForcastComponent","weekForcast","Date","getDay","temp","Temperature","Maximum","Value","Minimum","Day","IconPhrase","Icon","currentCity","currentForcast","Imperial","variant","startIcon","addFavorite","FavoritesScreen","cityForcastComponent","setCityForcastComponent","history","useHistory","useEffect","localArr","favoritesList","cityKey","current","details","push","ForcastComponent","k","cityTitle","App","favoritesKeys","setFavoritesKeys","currentData","setCurrentData","week","todayForcast","changeLocation","lat","lng","getGeoPosition","myLocation","ParentCity","forcast","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","id","document","getElementById","exact","path","newFavorites","filter","keyCity","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.81690ceb.chunk.js","sourcesContent":["export const APP_ID = \"GwAkCuDeGMuLbTGPd8AJ4qf5OXaGOyDc\";\r\n\r\nexport const DEFAULT_LAT = 32.0853;\r\nexport const DEFAULT_LNG = 34.7818;","import { APP_ID } from \"../Constants/Constants\";\r\n\r\nimport axios from 'axios';\r\n\r\nconst API_HOST = 'https://dataservice.accuweather.com/';\r\nconst API_VERSION = 'v1';\r\n\r\nconst getLocationApiUrl = (term) => `${API_HOST}locations/${API_VERSION}/cities/geoposition/search?apikey=${APP_ID}&q=${term}`;\r\n\r\nconst getWeatherApiUrl = key => `${API_HOST}forecasts/${API_VERSION}/daily/5day/${key}?apikey=${APP_ID}`;\r\n\r\nconst getAutoCompleteUrl = (term) => `${API_HOST}locations/${API_VERSION}/cities/autocomplete?apikey=${APP_ID}&q=${term}`;\r\n\r\nconst getCurrentConditionsUrl = key => `${API_HOST}currentconditions/${API_VERSION}/${key}?apikey=${APP_ID}`;\r\n\r\nexport async function getAutoComplete(term){\r\n  return await axios.get(getAutoCompleteUrl(term));\r\n}\r\n\r\nexport async function getGeoPosition(term){\r\n    return await axios.get(getLocationApiUrl(term));\r\n}\r\n\r\nexport async function getCurrentConditions(key) {\r\n  return await axios.get(getCurrentConditionsUrl(key));\r\n}\r\n\r\nexport async function get5DaysOfForecasts(key) {\r\n  return await axios.get(getWeatherApiUrl(key));\r\n}","import React, {useState} from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport {\r\n  NavLink \r\n} from \"react-router-dom\";\r\nimport './Header.css'\r\n\r\nfunction Header(props) {\r\n\r\n    return (\r\n        <div className=\"header\">\r\n            <div className=\"container\" >\r\n                <div className=\"title\" >\r\n                    <div className=\"buttonContainer\">\r\n                        <Button onClick={props.modeChange} >\r\n                            <div> Change Mode </div>\r\n                        </Button>\r\n                    </div>\r\n                    <div>\r\n                        Herolo Weather Task\r\n                    </div>\r\n                </div>\r\n                <div className=\"buttons\" >\r\n                    <div className=\"buttonContainer\">\r\n                        <NavLink  to=\"/\" onClick={()=> {props.setCurrentPage('home')}}>\r\n                           <div className={props.currentPage ==='home' ? \"clicked\" : \"notClicked\"}> Home </div>\r\n                        </NavLink>\r\n                    </div>\r\n                    <div className=\"buttonContainer\">\r\n                        <NavLink  to=\"/favorites\" onClick={()=> {props.setCurrentPage('favorites')}}>\r\n                            <div className={props.currentPage ==='favorites' ? \"clicked\" : \"notClicked\"}> Favorites </div>\r\n                        </NavLink>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React, { useState } from 'react';\r\nimport {getAutoComplete, get5DaysOfForecasts} from '../../actions/AppService';\r\nimport './SearchBar.css'\r\n\r\nexport default function SearchBar(props) {\r\n    const [value, setValue] = useState('');\r\n    const [select, setSelect] = useState([]);\r\n    const [errMsg, setErrMsg] = useState('');\r\n    const [cursor, setCursor] = useState(0);\r\n\r\n    const setDefaultState = () => {\r\n        setValue('');\r\n        setSelect([]);\r\n        setCursor(0);\r\n        setErrMsg('');\r\n    }\r\n\r\n    const onInputChange = async(term) => {\r\n        if(term === ''){\r\n            setDefaultState();\r\n        }\r\n        else{\r\n            setValue(term);\r\n            const results = await getAutoComplete(term);\r\n            setSelect(results.data);\r\n        }\r\n    }\r\n\r\n    const handleKeyDown =(e) => {\r\n        if (e.keyCode === 38) {\r\n            if(cursor === 0){\r\n                setCursor(select.length - 1);\r\n            }\r\n            else{\r\n                setCursor(cursor - 1);\r\n            }\r\n        }\r\n\r\n        if (e.keyCode === 40) {\r\n            if(cursor === select.length - 1){\r\n                setCursor();\r\n            }\r\n            else{\r\n                setCursor(cursor + 1);\r\n            }\r\n        }\r\n        if(e.keyCode === 13 && select.length !== 0){\r\n            handleClick(select[cursor]);\r\n        }\r\n    }\r\n\r\n    const handleClick = async(city) => {\r\n        await get5DaysOfForecasts(city.Key).then(async forecast => {\r\n            const loc = city.LocalizedName + ',' + city.Country.ID\r\n            await props.setCityForcast(loc, city.Key, forecast.data.DailyForecasts)\r\n        });\r\n        setDefaultState()\r\n    }\r\n\r\n    const autoCompleteItemRender = (data,i) =>{\r\n        return(\r\n            <div  onClick={() => handleClick(data)} className={cursor === i ? 'autocomplete-item active' : 'autocomplete-item'} key={data.Key} >\r\n                <strong>{value.charAt(0).toUpperCase()}</strong>\r\n                {data.LocalizedName.toString().replace(value.charAt(0).toUpperCase(),'')}\r\n            </div>\r\n        )\r\n    }\r\n\r\n  return (\r\n    <div className=\"CountrySelector\">\r\n            <div className=\"form-group\">\r\n              <input\r\n                  placeholder=\"Search city...\"\r\n                  value={value}\r\n                  onKeyDown={ handleKeyDown }\r\n                  onChange={event => onInputChange(event.target.value)}\r\n                  className=\"form-control input-search\" />\r\n                  <div className=\"error\">{errMsg}</div>\r\n                  <div className=\"autocomplete-items\">\r\n                   {\r\n                    (select.length === 0 && value !== '') ? <div>No match results</div> : select.map((data,i) => autoCompleteItemRender(data,i))\r\n                    }\r\n                   </div>\r\n            </div>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport ReactAnimatedWeather from 'react-animated-weather';\r\n \r\nconst defaults = {\r\n  color: 'black',\r\n  animate: true\r\n};\r\n \r\nconst IconComponent = (props) => {\r\n    const size = props.size || 400\r\n    let icon = 'CLEAR_DAY';\r\n    switch(props.icon) {\r\n        case 1:\r\n        case 2:\r\n            icon = 'CLEAR_DAY'\r\n            break;\r\n        case 33:\r\n        case 34:\r\n            icon = 'CLEAR_NIGHT'\r\n            break;\r\n        case 3:\r\n        case 4:\r\n        case 5:\r\n            icon = 'PARTLY_CLOUDY_DAY'\r\n            break;\r\n        case 35:\r\n        case 36:\r\n        case 37:\r\n            icon = 'PARTLY_CLOUDY_NIGHT'\r\n            break;\r\n        case 6:\r\n        case 7:\r\n        case 8:\r\n        case 38:\r\n            icon = 'CLOUDY'\r\n            break;\r\n        case 12:\r\n        case 13:\r\n        case 14:\r\n        case 15:\r\n        case 16:\r\n        case 17:\r\n        case 18:\r\n        case 26:\r\n        case 39:\r\n        case 40:\r\n        case 41:\r\n        case 42:\r\n            icon = 'RAIN'\r\n            break;\r\n        case 24:\r\n        case 25:\r\n            icon = 'SLEET'\r\n            break;\r\n        case 19:\r\n        case 20:\r\n        case 21:\r\n        case 22:\r\n        case 23:\r\n        case 29:\r\n        case 43:\r\n        case 44:\r\n            icon = 'SNOW'\r\n            break;\r\n        case 32:\r\n            icon = 'WIND'\r\n            break;\r\n        case 11:\r\n            icon = 'FOG'\r\n            break;\r\n        default:\r\n            icon = 'CLEAR_DAY'\r\n}\r\n\r\n    \r\n    return(\r\n        <ReactAnimatedWeather\r\n        icon={icon}\r\n        color={defaults.color}\r\n        size={size}\r\n        animate={defaults.animate}\r\n        />\r\n    )};\r\n \r\nexport default IconComponent;","import React from 'react'\r\nimport './DetailsComponent.css'\r\nimport IconComponent from '../IconComponent/IconComponent';\r\n\r\nfunction DetailsComponent(props) {\r\n    return (\r\n        <div className=\"details-container\" >\r\n            <div className=\"details-title\" >\r\n                {props.title}\r\n            </div>\r\n            <div className=\"details-currentWeather\" >\r\n                {props.value}°\r\n            </div>\r\n            <div className=\"details-weatherIcon\" >\r\n                {props.WeatherText}\r\n                <IconComponent icon={props.WeatherIcon} size={120}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DetailsComponent\r\n","import React, {useState} from 'react';\r\nimport SearchBar from '../../Components/SearchComponent/SearchBar';\r\nimport Button from '@material-ui/core/Button';\r\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport IconComponent from '../../Components/IconComponent/IconComponent';\r\nimport DetailsComponent from '../../Components/DetailsComponent/DetailsComponent';\r\nimport './HomeScreen.css'\r\n\r\nfunction HomeScreen(props) {\r\n\r\n    const [isFavorite, setIsFavorite] = useState(props.isSetAsFavorite(props.currentCityKey))\r\n\r\n    if(props.isSetAsFavorite(props.currentCityKey)!== isFavorite){\r\n       setIsFavorite(props.isSetAsFavorite(props.currentCityKey)) \r\n    }\r\n    \r\n    const weekday = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\r\n\r\n    const getAvrage = (temp) => {\r\n        return ((temp.Maximum.Value + temp.Minimum.Value) / 2)\r\n    }\r\n\r\n    const WeekForcastComponent =props.weekForcast && props.weekForcast.map((forecast,i) => {\r\n        return (\r\n            <div className=\"WeekForcastComponent\" key={i}>\r\n                <DetailsComponent \r\n                    title={weekday[new Date(forecast.Date).getDay()]}\r\n                    value={getAvrage(forecast.Temperature)}\r\n                    WeatherText={forecast.Day.IconPhrase}\r\n                    WeatherIcon={forecast.Day.Icon} />\r\n            </div>\r\n        )}\r\n    )\r\n\r\n    const changeFavorite = () => {\r\n        setIsFavorite(!isFavorite)\r\n        props.addFavorite({key:props.currentCityKey, city:props.currentCity})\r\n    }\r\n\r\n    return (\r\n        <div className=\"home-container\">\r\n            <div className=\"searchBar\">\r\n                <SearchBar setCityForcast={props.setCityForcast} />\r\n            </div>\r\n            <div className=\"infoHeader\">\r\n                <div className=\"infotitle\">\r\n                    <div>{props.currentCity}</div>\r\n                    <div>\r\n                        {props.currentForcast?.Temperature?.Imperial?.Value}°\r\n                    </div>\r\n                </div>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    startIcon={isFavorite? <FavoriteIcon /> : <FavoriteBorderIcon />}\r\n                    onClick={changeFavorite}>\r\n                        Add to favorites\r\n                </Button>\r\n            </div>\r\n            <div className=\"currentWeather\">\r\n                {props.currentForcast?.WeatherText}\r\n                <IconComponent icon={props.currentForcast?.WeatherIcon} size={200}/>\r\n            </div>\r\n            <div className=\"week-day-forecast\">\r\n                {WeekForcastComponent}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HomeScreen\r\n","import React, {useState, useEffect} from 'react'\r\nimport {getCurrentConditions} from '../../actions/AppService';\r\nimport DetailsComponent from '../../Components/DetailsComponent/DetailsComponent';\r\nimport { useHistory } from 'react-router-dom';\r\nimport './FavoritesScreen.css'\r\n\r\nfunction FavoritesScreen(props) {\r\n\r\n    const [cityForcastComponent, setCityForcastComponent] = useState([]);\r\n    let history = useHistory();\r\n        \r\n    useEffect(() => {\r\n        let localArr = [];\r\n        props.favoritesList.map(async (cityKey, i) => {\r\n        await getCurrentConditions(cityKey.key).then(current => {\r\n            const details = current.data[0]\r\n            setCityForcastComponent([...localArr,\r\n            {key:cityKey.key ,title:cityKey.city, value:details.Temperature.Imperial.Value, WeatherText:details.WeatherText, WeatherIcon: details.WeatherIcon}])\r\n            localArr.push({key:cityKey.key ,title:cityKey.city, value:details.Temperature.Imperial.Value, WeatherText:details.WeatherText, WeatherIcon: details.WeatherIcon});\r\n        })\r\n        })\r\n    },[props.favoritesList]);\r\n\r\n    const handleClick = (cityKey, cityTitle) => {\r\n        props.setCityForcast(cityTitle, cityKey);\r\n        props.setCurrentPage('home');\r\n        history.push('/');\r\n    }\r\n\r\n    const ForcastComponent = (cityForcastComponent.length !== 0) ? cityForcastComponent.map((current,k)=>{\r\n                return (\r\n            <div className=\"favoriteForcastComponent\" key={k} onClick={()=> handleClick(current.key, current.title)}>\r\n                <DetailsComponent \r\n                    title={current.title}\r\n                    value={current.value}\r\n                    WeatherText={current.WeatherText}\r\n                    WeatherIcon={current.WeatherIcon} />\r\n            </div>)\r\n            }) : <div></div>\r\n\r\n    return (\r\n        <div className=\"favorite-container\">\r\n            {ForcastComponent}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FavoritesScreen\r\n","import {\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport React, { useState, useEffect } from 'react';\nimport {getGeoPosition, get5DaysOfForecasts, getCurrentConditions} from './actions/AppService';\nimport {DEFAULT_LAT, DEFAULT_LNG} from './Constants/Constants';\nimport Header from './Components/HeaderComponent/Header'\nimport Home from './Screens/HomeScreen/HomeScreen'\nimport Favorites from './Screens/FavoritesScreen/FavoritesScreen'\nimport './App.css';\n\nfunction App() {\n\n  const [favoritesKeys, setFavoritesKeys] = useState([])\n  const [currentData, setCurrentData] = useState({currentCityKey: null, currentCity:null, weekForcast:null, currentForcast:null }) \n  const [currentPage, setCurrentPage] = useState('home')\n\n  useEffect(() => {\n    let cityKey, city, week, todayForcast;\n    const changeLocation = (lat , lng) => {\n        getGeoPosition(lat + ',' +lng).then( myLocation => \n                    {\n                        const loc = myLocation.data.ParentCity || myLocation.data\n                        city=(loc.LocalizedName + ' , ' + myLocation.data.Country.ID);\n                        cityKey=(loc.Key)\n                        getCurrentConditions(loc.Key).then(current => {todayForcast=(current.data[0])})\n                        get5DaysOfForecasts(loc.Key).then( forcast => \n                            {\n                            week=(forcast.data.DailyForecasts);\n                            setCurrentData({currentCityKey: cityKey, currentCity:city, weekForcast:week, currentForcast:todayForcast })\n                            })\n                    }\n                );\n    }\n        if (navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition( (position) => {\n                const {latitude, longitude} = position.coords;\n                changeLocation(latitude, longitude);\n\n            });\n        } else {\n            changeLocation(DEFAULT_LAT, DEFAULT_LNG);\n        }\n  },[]);\n\n    const setCityForcast = (loc , key , forcast) => {\n      let week = forcast;\n      if(!week){\n        get5DaysOfForecasts(key).then( forcast => \n          {\n            week=(forcast.data.DailyForecasts);\n            getCurrentConditions(key).then(current => \n              setCurrentData({currentCityKey: key, currentCity:loc, weekForcast:week, currentForcast:current.data[0] }))\n          })\n      }\n      else{\n        getCurrentConditions(key).then(current => \n          setCurrentData({currentCityKey: key, currentCity:loc, weekForcast:week, currentForcast:current.data[0] }))\n      }\n    }\n\n  const replaceTheme = () => {\n    if (document.getElementById('app').className ===\"light-theme\"){\n      document.getElementById('app').className = \"dark-theme\"\n    }\n    else {\n      document.getElementById('app').className = \"light-theme\"\n    }\n  }\n\n  const isSetAsFavorite = (key) => {\n    for(var i = 0; i < favoritesKeys.length; i++) {\n        if (favoritesKeys[i].key === key) {\n            return true;\n        }\n    }\n    return false;\n  }\n\n  const favoriteChange = (cityKey) => {\n    let newFavorites = favoritesKeys;\n    let toRemove = isSetAsFavorite(cityKey.key);\n    if (toRemove){\n      newFavorites = newFavorites.filter(keyCity=> keyCity.key !== cityKey.key)\n    }\n    else {\n      newFavorites.push(cityKey)\n    }\n    setFavoritesKeys(newFavorites)\n  }\n\n\n  return (\n      <div id=\"app\" className=\"light-theme\">\n        <Header modeChange={replaceTheme} setCurrentPage={setCurrentPage} currentPage={currentPage} />\n        <div>\n        <Switch>\n          <Route exact path=\"/\">\n            <Home addFavorite={favoriteChange} isSetAsFavorite={isSetAsFavorite} \n             favoritesKeys={favoritesKeys} {...currentData} setCityForcast={setCityForcast} />\n          </Route>\n          <Route path=\"/favorites\">\n            <Favorites favoritesList={favoritesKeys} setCityForcast={setCityForcast} setCurrentPage={setCurrentPage} />\n          </Route>\n        </Switch>\n        </div>\n      </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {\n  BrowserRouter as Router\n} from \"react-router-dom\";\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}